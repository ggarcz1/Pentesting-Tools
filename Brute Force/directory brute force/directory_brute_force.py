import requests
import time
import socket
import threading

def test_network_connectivity(host, port):
    try:
        # Create a socket object
        sock = socket.create_connection((host, port), timeout=5)
        print(f"Successfully connected to {host}:{port}")
        sock.close()
        return True
    except socket.error as e:
        print(f"Unable to connect to {host}:{port}. Error: {e}")
        return False
    
# MUST have / at end for this, update to change it
# FILENAME = ''
url = '127.0.0.1'
port = '5000'
url_and_port = f'{url}:{port}'

header = 'Path\tStatus Code\n-----------------------'
ip_header = f'Beginning Directory Brute forcer for http://{url}'
print(ip_header)

# check for \ at the end of URL
if url[len(url) - 1] != '\\':
    url += '\\'
    

## if the url does not have a port on it
# port = input('Care to add a port? (\'n\' for no)')
# if port is not 'n':
#     url+= f':{port}'
# else:
#     print('Very well, using default HTTP/HTTPS of 80, 443, and 8080 for good measure.')
#     ports = [80, 443, 8080]

# # test connectivity to site
# if not test_network_connectivity('127.0.0.1','5000'):
#     print(f'\n\nWebsite/IP not up. \nTerminating Program...\n\n')
#     exit (1)

# f = open(f'{FILENAME}')
f = open('directory-list-2.3-medium.txt')

f2 = open('output.txt', 'w')
counter = 0

print(header)
f2.write(ip_header+'\n'+header+'\n')

for path in f: 
    # new line was present, giving incorrect results
    path = path[:-1]
    send_url = f'http://{url}'+path
    response = requests.get(send_url)
    output = ''
    if response.status_code == 200:
        # full url
        # output = f'{send_url}\t200'
        output = f'{send_url}\t200'
        print(f'{path}\t200')
    else:
        # full url
        output = f'{send_url}\t{response.status_code}'
        # output = f'{path}\t{response.status_code}'
    f2.write(output+'\n')
    
print('Done!')