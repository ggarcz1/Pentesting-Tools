import random
import re

# usage
# 10 | python .\fake_ip.py
# python .\fake_ip.py

# writes to the following files
# ips_output.txt
# grepable_ips_output.txt

# grep usage
# grep Private ips_output_grepable.txt | awk '{split($0,a,","); print a[2]}'
# grep Public ips_output_grepable.txt | awk '{split($0,a,","); print a[2]}'

def generate_private_ip():
    select = random.randint(0,2)
    source = ''
    if select == 0:
        # 192.168.0.0/16
        source += '192.168.' + \
            '.'.join(str(random.randint(0, 256)) for _ in range(0, 2))
    elif select == 1:
        # 172.16.0.0/16 --> 172.31.255.255/20
        source += '172.' + \
            str(random.randint(16, 32))+'.' + \
            '.'.join(str(random.randint(0, 256)) for _ in range(0, 2))
    elif select == 2:
        # 10.0.0.0/8
        source += '10.' + \
            '.'.join(str(random.randint(0, 256)) for _ in range(0, 3))

    return source[:-1]

# TODO: how to make sure these aren't private?
# regex
def generate_ip():
    source = '.'.join(str(random.randint(0, 256)) for _ in range(0, 4))
    # torf = True
    # while torf:
    #     arr = source.split('.')
    #     if (arr[0] == '192' and arr[1] == '168') or (arr[0] == '172' and (arr[1] >= 16 and arr[1] < 32)) or (arr[0] == 10):
    #         torf = True
    #     else:
    #         torf = False            
    return source[:-1]


FILE_IP_OUTPUT = 'ips_output.txt'
FILE_IP_OUTPUT_GREP = 'grepable_ips_output.txt'

f = open(f'{FILE_IP_OUTPUT}', 'w')
fg = open(f'{FILE_IP_OUTPUT_GREP}', 'w')

counter = input('Enter the number or IPs to generate: ')
verify_num = re.compile(r'[0-9]+')
search = verify_num.findall(counter)

if (len(search) == 0):
# if type(counter) is not int or counter <= 0:
    print('Error on input.  ')
    exit()

value = int(search[0])

f.write('-----Public IPs-----\n')
for each in range(value):
    ip = generate_ip()
    f.write(ip+'\n')
    fg.write('Public,'+ip+'\n')
    # print(generate_ip())

f.write('-----Private IPs-----\n')
for each in range(value):
    ip = generate_private_ip()
    f.write(ip+'\n')
    fg.write('Private,'+ip+'\n')
    # print(generate_private_ip())

print(f'Wrote to {FILE_IP_OUTPUT} and {FILE_IP_OUTPUT_GREP}')

f.close()